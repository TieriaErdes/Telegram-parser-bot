#!/usr/bin/env python
# pylint: disable=unused-argument
# This program is dedicated to the public domain under the CC0 license.

"""
Simple Bot to handle '(my_)chat_member' updates.
Greets new users & keeps track of which chats the bot is in.

Usage:
Press Ctrl-C on the command line or send a signal to the process to stop the
bot.
"""

import logging
import re
import html
import random
import sqlite3
import asyncio
from datetime import datetime, timedelta
from typing import Optional, Tuple

from telegram import Chat, ChatMember, ChatMemberUpdated, Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ChatMemberHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# Enable logging

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# set higher logging level for httpx to avoid all GET and POST requests being logged
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)


# –ù–∞–±–æ—Ä —ç–º–æ–¥–∑–∏
_members_emodzi_list = ['üëÆ‚Äç‚ôÇÔ∏è', 'üë∑‚Äç‚ôÄÔ∏è', 'üíÇ‚Äç‚ôÄÔ∏è', 'üïµÔ∏è‚Äç‚ôÄÔ∏è', 'üë©‚Äç‚öïÔ∏è', 'üë®‚Äç‚öïÔ∏è', 'üë©‚Äçüåæ',
                        'üë©‚Äçüç≥', 'üë©‚Äçüéì', 'üë©‚Äçüé§', 'üßë‚Äçüé§', 'üë®‚Äçüé§', 'üë©‚Äçüè´', 'üßë‚Äçüè´',
                        'üë©‚Äçüè≠', 'üë©‚Äçüíª', 'üë©‚Äçüíº', 'üë®‚Äçüíº', 'üë©‚Äçüîß', 'üë©‚Äçüî¨', 'üë©‚Äçüé®',
                        'üßë‚Äçüî¨', 'üë®‚Äçüé®', 'üë©‚Äçüöí', 'üë©‚Äç‚úàÔ∏è', 'üë©‚ÄçüöÄ', 'üë©‚Äç‚öñÔ∏è', 'üë®‚Äç‚öñÔ∏è',
                        'üë∞‚Äç‚ôÄÔ∏è', 'ü§µ‚Äç‚ôÄÔ∏è', 'ü§µ‚Äç‚ôÇÔ∏è', 'üë∏', 'ü§¥', 'ü•∑', 'ü¶∏‚Äç‚ôÄÔ∏è', 'ü¶∏‚Äç‚ôÇÔ∏è',
                        'ü¶π‚Äç‚ôÄÔ∏è', 'ü§∂', 'üßô‚Äç‚ôÄÔ∏è', 'üßù‚Äç‚ôÄÔ∏è', 'üßù', 'üßå', 'üßõ‚Äç‚ôÄÔ∏è', 'üßõ‚Äç‚ôÇÔ∏è',
                        'üëº', 'ü§∞', 'ü´É', 'üíÅ‚Äç‚ôÄÔ∏è', 'üíÅ‚Äç‚ôÇÔ∏è', 'üôÖ‚Äç‚ôÄÔ∏è', 'üôÜ‚Äç‚ôÄÔ∏è', 'üôÜ', 'üôã‚Äç‚ôÄÔ∏è',
                        'üôã‚Äç‚ôÇÔ∏è', 'üßè‚Äç‚ôÄÔ∏è', 'ü§¶‚Äç‚ôÄÔ∏è', 'ü§¶', 'ü§∑‚Äç‚ôÄÔ∏è', 'üôé‚Äç‚ôÄÔ∏è', 'üôç‚Äç‚ôÄÔ∏è', 'üôç‚Äç‚ôÇÔ∏è',
                        'üíá‚Äç‚ôÄÔ∏è', 'üíá‚Äç‚ôÇÔ∏è', 'üíÜ‚Äç‚ôÄÔ∏è', 'üíÜ‚Äç‚ôÇÔ∏è', 'üíÖ', 'üíÉ', 'üï∫', 'üßë‚Äçü¶Ω', 'ü™¢',
                        'üß∂', 'üßµ', 'ü™°', 'üß•', 'ü•º', 'ü¶∫', 'üëö', 'üëï', 'üëñ', 'ü©≤',
                        'ü©≥', 'üëî', 'üëó', 'üëô', 'ü©±', 'üëò', 'ü•ª', 'ü©¥', 'ü•ø', 'üë†', 'üë°',
                        'üë¢', 'üëû', 'üëü', 'ü•æ', 'üß¶', 'üß§', 'üß£', 'üé©', 'üß¢']

DATABASE_PATH = 'database.db'


def extract_status_change(chat_member_update: ChatMemberUpdated) -> Optional[Tuple[bool, bool]]:
    """Takes a ChatMemberUpdated instance and extracts whether the 'old_chat_member' was a member
    of the chat and whether the 'new_chat_member' is a member of the chat. Returns None, if
    the status didn't change.
    """
    status_change = chat_member_update.difference().get("status")
    old_is_member, new_is_member = chat_member_update.difference().get("is_member", (None, None))

    if status_change is None:
        return None

    old_status, new_status = status_change
    was_member = old_status in [
        ChatMember.MEMBER,
        ChatMember.OWNER,
        ChatMember.ADMINISTRATOR,
    ] or (old_status == ChatMember.RESTRICTED and old_is_member is True)
    is_member = new_status in [
        ChatMember.MEMBER,
        ChatMember.OWNER,
        ChatMember.ADMINISTRATOR,
    ] or (new_status == ChatMember.RESTRICTED and new_is_member is True)

    return was_member, is_member

async def add_users_in_bd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    conn = sqlite3.connect(DATABASE_PATH)
    c = conn.cursor()

    chat_id = update.effective_chat.id
    logger.info('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ "%s" –≤ –ë–î', update.effective_chat.title)
    chat_admins = await update.effective_chat.get_administrators()
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∏ —Ñ–∞–º–∏–ª–∏–π
    admins_ids = [(admins.user.id) for admins in chat_admins]
    for admin_id in admins_ids:
        c.execute("INSERT INTO users VALUES (?, ?, ?, ?)", (chat_id, admin_id, 0, None))
    conn.commit()
    conn.close()

async def track_chats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Tracks the chats the bot is in."""
    result = extract_status_change(update.my_chat_member)
    if result is None:
        return
    was_member, is_member = result

    # Let's check who is responsible for the change
    cause_name = update.effective_user.full_name

    # Handle chat types differently:
    chat = update.effective_chat
    if chat.type == Chat.PRIVATE:
        if not was_member and is_member:
            # This may not be really needed in practice because most clients will automatically
            # send a /start command after the user unblocks the bot, and start_private_chat()
            # will add the user to "user_ids".
            # We're including this here for the sake of the example.
            logger.info("%s —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞", cause_name)
            context.bot_data.setdefault("user_ids", set()).add(chat.id)
        elif was_member and not is_member:
            logger.info("%s –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞", cause_name)
            context.bot_data.setdefault("user_ids", set()).discard(chat.id)
    elif chat.type in [Chat.GROUP, Chat.SUPERGROUP]:
        if not was_member and is_member:
            logger.info('%s –¥–æ–±–∞–≤–∏–ª –±–æ—Ç–∞ –≤ —á–∞—Ç "%s"', cause_name, chat.title)
            # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –≤ –±–¥
            await add_users_in_bd(update, context)
            context.bot_data.setdefault("group_ids", set()).add(chat.id)
        elif was_member and not is_member:
            logger.info('%s –∏—Å–∫–ª—é—á–∏–ª –±–æ—Ç–∞ –∏–∑ —á–∞—Ç–∞ "%s"', cause_name, chat.title)
            context.bot_data.setdefault("group_ids", set()).discard(chat.id)
    elif not was_member and is_member:
        logger.info("%s –¥–æ–±–∞–≤–∏–ª –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª %s", cause_name, chat.title)
        context.bot_data.setdefault("channel_ids", set()).add(chat.id)
    elif was_member and not is_member:
        logger.info("%s –∏—Å–∫–ª—é—á–∏–ª –±–æ—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ %s", cause_name, chat.title)
        context.bot_data.setdefault("channel_ids", set()).discard(chat.id)





async def call(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
    logger.info("%s –≤—ã–∑–≤–∞–ª —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç–µ %s", update.effective_user.full_name, update.effective_chat.title)

    chat_id = update.effective_chat.id
    members_count = await context.bot.get_chat_member_count(chat_id)
    print(f"–ß–∞—Ç {update.effective_chat.title} –∏–º–µ–µ—Ç {members_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")

    #for member in context.bot.iter_chat_members(chat_id):
    #    print(member)

    chat_admins = await update.effective_chat.get_administrators()


    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    admin_ids = [(admins.user.id) for admins in chat_admins]

    print(admin_ids)

    admins_links = ""
    for admin_id in admin_ids:
        admins_links += (f' <a href="tg://user?id={admin_id}">{_members_emodzi_list[admin_id % 100]}</a>')

    await update.effective_chat.send_message(admins_links, parse_mode='HTML')

    # –º–æ–π id
    #await update.message.reply_text(f" {await update.effective_chat.get_member(975108088)}")

    #await update.message.reply_text(f'–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ "{update.effective_chat.title}".')




async def show_admins(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info('%s –≤—ã–∑–≤–∞–ª —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≤ —á–∞—Ç–µ "%s"', update.effective_user.full_name, update.effective_chat.title)

    chat_admins = await update.effective_chat.get_administrators()
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∏ —Ñ–∞–º–∏–ª–∏–π
    admins_custom_titles = [(admins.custom_title) for admins in chat_admins]
    admins_ids = [(admins.user.id) for admins in chat_admins]
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    #print(names_and_surnames)

    user_links = ""
    for admin_id, admin_custom_title in zip(admins_ids, admins_custom_titles):
        if admin_custom_title != None:
            user_links += (f'<a href="tg://user?id={admin_id}">{admin_custom_title + _members_emodzi_list[admin_id % 100]}</a>\n')
        else:
            user_links += (
                f'<a href="tg://user?id={admin_id}">{_members_emodzi_list[admin_id % 100]}</a>\n')

    await update.effective_chat.send_message(user_links, parse_mode='HTML')

async def show_chats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Shows which chats the bot is in"""

    print(f"{context.bot_data}")

    user_ids = ", ".join(str(uid) for uid in context.bot_data.setdefault("user_ids", set()))
    group_ids = ", ".join(str(gid) for gid in context.bot_data.setdefault("group_ids", set()))
    channel_ids = ", ".join(str(cid) for cid in context.bot_data.setdefault("channel_ids", set()))
    text = (
        f"@{context.bot.username} –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ª–æ–≥–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ {user_ids}. \n"
        f" –ë–æ–ª–µ–µ —Ç–æ–≥–æ, –æ–Ω —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º –≥—Ä—É–ø–ø —Å ID {group_ids} \n"
        f"–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–∞—Ö —Å ID {channel_ids}."
    )
    await update.effective_message.reply_text(text)


# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
async def help(update: Update, bot: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info('%s –≤—ã–∑–≤–∞–ª —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ "%s"', update.effective_user.full_name, update.effective_chat.title)
    await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: \n"
                                    f"/{call.__name__} \n"
                                    f"/{help.__name__} \n"
                                    f"/{show_chats.__name__} \n"
                                    f"/{show_admins.__name__} \n"
                                    "–∫–∞–ª–ª \n"
                                    "–ø–æ–º–æ—â—å \n"
                                    "help \n"
                                    "–ø–∞–º–∞–≥–∏—Ç–∏ \n"
                                    "—Å–ø–∏—Å–æ–∫ \n"
                                    "—Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ \n"
                                    "—á–∞—Ç—ã —Å –±–æ—Ç–æ–º \n"
                                    "—Å–Ω–µ–≥ \n"
                                    "–º–æ—è —Å—Ç–∞—Ç–∞ —Å–Ω–µ–≥–∞ \n"
                                    "—Å—Ç–∞—Ç–∞ —Å–Ω–µ–≥–∞ \n"
                                    "–ø–∏–Ω–≥"
                                    )

async def unknown(update: Update, bot: ContextTypes.DEFAULT_TYPE) -> None:
    #logger.info('%s –≤—ã–∑–≤–∞–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ "%s"', update.effective_user.full_name, update.effective_chat.title)
    #await update.message.reply_text("–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –º–Ω–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
    i = 1


async def greet_chat_members(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Greets new users in chats and announces when someone leaves"""
    result = extract_status_change(update.chat_member)
    if result is None:
        return

    was_member, is_member = result
    cause_name = update.chat_member.from_user.mention_html()
    member_name = update.chat_member.new_chat_member.user.mention_html()

    if not was_member and is_member:
        conn = sqlite3.connect(DATABASE_PATH)
        c = conn.cursor()
        existing_spoons = c.fetchone()
        c.execute("INSERT INTO users VALUES (?, ?, ?, ?)", (update.effective_chat.id, update.effective_user.id, 0, None))
        conn.commit()
        conn.close()
        await update.effective_chat.send_message(
            f"{member_name} –¥–æ–±–∞–≤–ª–µ–Ω {cause_name}. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
            parse_mode=ParseMode.HTML,
        )
    elif was_member and not is_member:
        await update.effective_chat.send_message(
            f"{member_name} –±–æ–ª—å—à–µ –Ω–µ —Å –Ω–∞–º–∏. –ë–æ–ª—å—â–æ–µ —Å–ø–∞—Å–∏–±–æ, {cause_name} ...",
            parse_mode=ParseMode.HTML,
        )


async def start_private_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Greets the user and records that they started a chat with the bot if it's a private chat.
    Since no `my_chat_member` update is issued when a user starts a private chat with the bot
    for the first time, we have to track it explicitly here.
    """
    user_name = update.effective_user.full_name
    chat = update.effective_chat
    if chat.type != Chat.PRIVATE or chat.id in context.bot_data.get("user_ids", set()):
        return

    logger.info("%s started a private chat with the bot", user_name)
    context.bot_data.setdefault("user_ids", set()).add(chat.id)

    await update.effective_message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {user_name}. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /show_chats —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤ –∫–∞–∫–∏—Ö —á–∞—Ç–∞—Ö —è –µ—Å—Ç—å."
    )


async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.effective_message.reply_text("–ü–æ–Ω–≥")


#–∏–≥—Ä–æ–≤–æ–π –∫–æ–¥
#–∏–≥—Ä–æ–≤–æ–π –∫–æ–¥

async def get_random_snow_spoons():
    return random.randint(1, 10)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
INTERVAL_SECONDS = 6 * 60 * 60  # 6 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞
last_call_times = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã "—Å–Ω–µ–≥"
async def snow_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–∑–æ–≤–∞
    now = datetime.utcnow()
    conn = sqlite3.connect(DATABASE_PATH)
    c = conn.cursor()
    try:
        last_call_time_str = c.execute("SELECT last_snow_command_time FROM users WHERE chat_id = ? AND user_id = ?",
                                       (chat_id, user_id)).fetchone()[0]
    except TypeError:  # –ò–ª–∏ –±–æ–ª–µ–µ –æ–±—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç: except Exception as e:
        c.execute("INSERT INTO users VALUES (?, ?, ?, ?)", (chat_id, user_id, 0, None))
        conn.commit()
        last_call_time_str = c.execute("SELECT last_snow_command_time FROM users WHERE chat_id = ? AND user_id = ?",
                                       (chat_id, user_id)).fetchone()[0]

    if last_call_time_str is not None:
        # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        last_call_time_str_clean = re.sub(r'\.\d+$', '', last_call_time_str)
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç datetime.datetime
        last_call_time = datetime.strptime(last_call_time_str_clean, '%Y-%m-%d %H:%M:%S')
        if now - last_call_time < timedelta(seconds=INTERVAL_SECONDS):
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ, –ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
            remaining_time = timedelta(seconds=INTERVAL_SECONDS) - (now - last_call_time)
            if remaining_time > timedelta(0):
                remaining_hours = int(remaining_time // timedelta(hours=1))
                remaining_minutes = int((remaining_time - timedelta(hours=remaining_hours)).total_seconds() // 60)
                remaining_seconds = int((remaining_time - timedelta(minutes=remaining_minutes)).total_seconds() % 60)
                remaining_time_string = f"–û—Å—Ç–∞–ª–æ—Å—å {remaining_hours} —á–∞—Å{'–∞' if remaining_hours == 1 else '–æ–≤'}, " \
                                        f"{remaining_minutes} –º–∏–Ω—É—Ç –∏ {remaining_seconds} —Å–µ–∫—É–Ω–¥."
                await context.bot.send_message(chat_id=update.effective_chat.id, text=remaining_time_string)
                conn.close()
            return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞
    #last_call_times[user_id] = now

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
    c.execute("UPDATE users SET last_snow_command_time = ? WHERE chat_id = ? AND user_id = ?", (now, chat_id, user_id))
    conn.commit()

    spoon_count = await get_random_snow_spoons()
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–í—ã —Å—ä–µ–ª–∏ {spoon_count} –ª–æ–∂–µ–∫ —Å–Ω–µ–≥–∞!")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    c.execute("SELECT snow_spoons FROM users WHERE chat_id = ? AND user_id = ?", (chat_id, user_id))
    existing_spoons = c.fetchone()
    if existing_spoons is not None:
        new_spoons_count = int(existing_spoons[0]) + spoon_count
        c.execute("UPDATE users SET snow_spoons = ? WHERE chat_id = ? AND user_id = ?",
                  (new_spoons_count, chat_id, user_id))
        conn.commit()
    else:
        c.execute("INSERT INTO users VALUES (?, ?, ?)", (chat_id, user_id, spoon_count))
        conn.commit()
    conn.close()



# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def create_database():
    conn = sqlite3.connect(DATABASE_PATH)
    c = conn.cursor()
    c.execute("CREATE TABLE IF NOT EXISTS users (chat_id INTEGER KEY, user_id INTEGER KEY, snow_spoons INTEGER, last_snow_command_time DATETIME)")
    conn.close()

create_database()


async def show_snow_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    conn = sqlite3.connect(DATABASE_PATH)
    c = conn.cursor()
    c.execute("SELECT snow_spoons FROM users WHERE chat_id = ? AND user_id = ?", (chat_id, user_id))
    stats = c.fetchone()
    conn.close()
    if stats is None:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ü–æ–∫–∞ —á—Ç–æ –≤—ã –µ—â—ë –Ω–µ –¥–µ–≥—É—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ —Å–Ω–µ–≥ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –í—ã —Å—ä–µ–ª–∏ {stats[0]} –ª–æ–∂–µ–∫ —Å–Ω–µ–≥–∞.")



async def allChat_snow_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    conn = sqlite3.connect(DATABASE_PATH)
    c = conn.cursor()
    c.execute("SELECT snow_spoons FROM users WHERE chat_id = ?", (chat_id,))
    total_spoons = c.fetchone()
    if total_spoons is None:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–º —á–∞—Ç–µ –µ—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–±–æ–≤–∞–ª —Å–Ω–µ–≥... –ù–µ—É–∂–µ–ª–∏ –≤—Å–µ –±–æ—è—Ç—Å—è, —á—Ç–æ –∏–º –ø–æ–ø–∞–¥—ë—Ç—Å—è –∂—ë–ª—Ç—ã–π?)")
    else:
        chat_admins = await update.effective_chat.get_administrators()
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        admins_custom_titles = [(admins.custom_title) for admins in chat_admins]
        admins_ids = [(admins.user.id) for admins in chat_admins]
        sum_stat_chat_spoons = 0
        admins_links = ""
        for admin_id, admin_custom_title in zip(admins_ids, admins_custom_titles):
            c.execute("SELECT snow_spoons FROM users WHERE chat_id = ? AND user_id = ?", (chat_id, admin_id))
            stat_spoons = c.fetchone()
            if (stat_spoons is not None) & (admin_custom_title is not None):
                sum_stat_chat_spoons += stat_spoons[0]
                admins_links += (f'<a href="tg://user?id={admin_id}">{admin_custom_title + _members_emodzi_list[admin_id % 100] + " —Å—ä–µ–ª " + str(stat_spoons[0]) + " –ª–æ–∂–µ–∫ —Å–Ω–µ–≥–∞"}</a>\n')
        sum_spoons_str = "–í—Å–µ–≥–æ –±—ã–ª–æ —Å—ä–µ–¥–µ–Ω–æ –≤ —á–∞—Ç–µ " + str(sum_stat_chat_spoons) + " –ª–æ–∂–µ–∫ —Å–Ω–µ–≥–∞"
        sum_spoons_str += "\n–í—Å—Ç—Ä–µ—á–∞–π—Ç–µ –ª—É—á—à–∏—Ö –ø–æ–∂–∏—Ä–∞—Ç–µ–ª–µ–π!!\n"

        conn.close()
        await update.effective_chat.send_message(sum_spoons_str + admins_links, parse_mode='HTML')
#–∫–æ–Ω–µ—Ü –∏–≥—Ä–æ–≤–æ–≥–æ –∫–æ–¥–∞
#–∫–æ–Ω–µ—Ü –∏–≥—Ä–æ–≤–æ–≥–æ –∫–æ–¥–∞


commands = {
    '–∫–∞–ª–ª': call,
    '–ø–æ–º–æ—â—å': help,
    'help': help,
    '–ø–∞–º–∞–≥–∏—Ç–∏': help,
    '—Å–ø–∏—Å–æ–∫': show_admins,
    '—Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤': show_admins,
    '—á–∞—Ç—ã —Å –±–æ—Ç–æ–º': show_chats,
    '—Å–Ω–µ–≥': snow_command,
    '–º–æ—è —Å—Ç–∞—Ç–∞ —Å–Ω–µ–≥–∞': show_snow_stats,
    '—Å—Ç–∞—Ç–∞ —Å–Ω–µ–≥–∞': allChat_snow_stats,
    '–ø–∏–Ω–≥': ping,
    '—Å–∏–∑–∞–º –æ—Ç–∫—Ä–æ–π—Å—è': add_users_in_bd
}

async def russian_commands(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
    message = update.message.text.lower().strip('/')
    command = commands.get(message, unknown)
    await command(update, context)


def main() -> None:
    """Start the bot."""
    # Create the Application and pass it your bot's token.
    application = Application.builder().token("7460009035:AAFb_uzUkhiTQDp0mNtx68Ia6xVdPrRU9Hs").build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    start_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, russian_commands)
    application.add_handler(start_handler)

    # Keep track of which chats the bot is in
    application.add_handler(ChatMemberHandler(track_chats, ChatMemberHandler.MY_CHAT_MEMBER))
    application.add_handler(CommandHandler("show_chats", show_chats))
    application.add_handler(CommandHandler("show_admins", show_admins))

    application.add_handler(CommandHandler("call", call))

    application.add_handler(CommandHandler("help", help))

    # Handle members joining/leaving chats.
    application.add_handler(ChatMemberHandler(greet_chat_members, ChatMemberHandler.CHAT_MEMBER))

    # Interpret any other command or text message as a start of a private chat.
    # This will record the user as being in a private chat with bot.
    application.add_handler(MessageHandler(filters.ALL, start_private_chat))

    # Run the bot until the user presses Ctrl-C
    # We pass 'allowed_updates' handle *all* updates including `chat_member` updates
    # To reset this, simply pass `allowed_updates=[]`
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()